# Generated by Django 4.1.2 on 2023-05-17 08:24

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Users",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=100, unique=True, verbose_name="email"
                    ),
                ),
                (
                    "email_verified",
                    models.BooleanField(
                        default=True,
                        help_text="True if the user has verified their email address.",
                    ),
                ),
                ("first_name", models.CharField(max_length=50)),
                ("last_name", models.CharField(max_length=50)),
                (
                    "date_joined",
                    models.DateTimeField(auto_now_add=True, verbose_name="date joined"),
                ),
                ("profession", models.CharField(default="", max_length=50)),
                ("institution", models.CharField(default="", max_length=50)),
                ("country", models.CharField(default="", max_length=50)),
                (
                    "access_level",
                    models.CharField(
                        choices=[
                            ("00_disabled", "Disabled"),
                            ("10_readonly", "Read-only"),
                            ("20_contributor", "Contributor"),
                            ("30_administrator", "Administrator"),
                            ("40_superuser", "Superuser"),
                        ],
                        default="readonly",
                        help_text="<b>User level of access to the Online Database system.</b>\n        <ul>\n        <li>Disabled users cannot login or reset their passwords.</li>\n        <li>Read-only users (default) have read-only access to 'approved' studies and results including search & filter functionality.</li>\n        <li>Contributors can add studies/results online, or via Excel import, and can manage their own contributions.</li>\n        <li>Administrators can add, edit, approve or delete any studies or results in the database.</li>\n        <li>Superusers have the same access as Administrators, but can also view, add, edit and delete users.\n        Superusers can change other user levels of access including promoting other users to Superusers.</li>\n        </ul>\n        ",
                        max_length=30,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Users",
            },
        ),
        migrations.CreateModel(
            name="Dataset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("Dataset_name", models.CharField(max_length=30, unique=True)),
                (
                    "Description",
                    models.TextField(
                        blank=True,
                        help_text="Optional description, such as the purpose or scope of the data set",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Document",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Title of download button shown to users on website home screen",
                        max_length=100,
                    ),
                ),
                ("upload_file", models.FileField(upload_to="uploads/documents/")),
                (
                    "minimum_access_level",
                    models.CharField(
                        choices=[
                            ("00_disabled", "Disabled"),
                            ("10_readonly", "Read-only"),
                            ("20_contributor", "Contributor"),
                            ("30_administrator", "Administrator"),
                            ("40_superuser", "Superuser"),
                        ],
                        help_text="Only visible to users equal to or above the chosen access level",
                        max_length=30,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Guide Document",
            },
        ),
        migrations.CreateModel(
            name="ImportSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "Source_file",
                    models.FileField(upload_to="uploads/imports/%Y/%m/%d/"),
                ),
                ("Original_filename", models.CharField(blank=True, max_length=255)),
                ("Upload_time", models.DateTimeField(blank=True, null=True)),
                ("Import_time", models.DateTimeField(blank=True, null=True)),
                ("Import_data", models.JSONField(blank=True, null=True)),
                (
                    "Dataset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="database.dataset",
                    ),
                ),
                (
                    "Imported_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Imported Excel Files",
                "verbose_name_plural": "Imported Excel Files",
            },
        ),
        migrations.CreateModel(
            name="StudiesModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "Created_time",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Contribution date"
                    ),
                ),
                (
                    "Updated_time",
                    models.DateTimeField(auto_now=True, verbose_name="Last modified"),
                ),
                (
                    "Approved_time",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Approval date"
                    ),
                ),
                (
                    "Import_row_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique Study identifier for linked Results (only if imported from Excel)",
                        max_length=20,
                        null=True,
                        verbose_name="Unique row identifier",
                    ),
                ),
                (
                    "Import_row_number",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Row number from spreadsheet (only if imported from Excel)",
                        null=True,
                        verbose_name="Excel row number",
                    ),
                ),
                (
                    "Study_group",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "Superficial skin and throat",
                                "Superficial skin and throat",
                            ),
                            ("Invasive Strep A", "Invasive Strep A"),
                            ("ARF", "ARF"),
                            ("APSGN", "APSGN"),
                        ],
                        help_text="Broad classification of the Strep A-associated disease type that the study was based on: (i) Superficial skin and/or throat infections, (ii) Invasive Strep A infections, (iii) Acute Rheumatic Fever (ARF), (iv) Acute Post Streptococcal Glomerulonephritis (APSGN).",
                        max_length=50,
                        verbose_name="Study Group",
                    ),
                ),
                (
                    "Paper_title",
                    models.CharField(
                        help_text="Title of the published manuscript/report.",
                        max_length=500,
                        verbose_name="Paper Title",
                    ),
                ),
                (
                    "Paper_link",
                    models.CharField(
                        blank=True,
                        help_text="URL or doi link for access to the source manuscript/report, full access will depend on open/institutional access permissions set by each journal.",
                        max_length=1000,
                        verbose_name="Paper Link",
                    ),
                ),
                (
                    "Year",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Year of publication of manuscript/report.",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1900),
                            django.core.validators.MaxValueValidator(2100),
                        ],
                        verbose_name="Publication Year",
                    ),
                ),
                (
                    "Disease",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("APSGN", "APSGN"),
                            ("ARF", "ARF"),
                            ("iStrep A - NF", "iStrep A - NF"),
                            ("iStrep A - Scarlet fever", "iStrep A - Scarlet fever"),
                            ("iStrep A - bacteraemia", "iStrep A - bacteraemia"),
                            ("iStrep A - cellulitis", "iStrep A - cellulitis"),
                            ("iStrep A - pneumonia", "iStrep A - pneumonia"),
                            ("iStrep A - sepsis", "iStrep A - sepsis"),
                            ("iStrep A - severe TSS", "iStrep A - severe TSS"),
                            ("iStrep A - all", "iStrep A - all"),
                            (
                                "Superficial skin & throat infection",
                                "Superficial skin & throat infection",
                            ),
                            (
                                "Superficial throat infection",
                                "Superficial throat infection",
                            ),
                            (
                                "Superficial skin infection",
                                "Superficial skin infection",
                            ),
                            ("Other", "Other"),
                        ],
                        help_text="Subcategory of disease within the broader study group. Example: iStrepA - bactaraemia",
                        max_length=100,
                        verbose_name="Specific Disease",
                    ),
                ),
                (
                    "Study_design",
                    models.CharField(
                        choices=[
                            ("Case series", "Case series"),
                            ("Cross-sectional", "Cross-sectional"),
                            ("Prospective", "Prospective"),
                            (
                                "Prospective and Retrospective",
                                "Prospective and Retrospective",
                            ),
                            ("Prospective cohort", "Prospective cohort"),
                            ("Report", "Report"),
                            ("Retrospective", "Retrospective"),
                            ("Retrospective review", "Retrospective review"),
                            ("Retrospective cohort", "Retrospective cohort"),
                            ("Review article", "Review article"),
                            ("Other", "Other"),
                        ],
                        help_text="Study classification based on the temporality of data collection. Prospective (if study involves screening or active surveillance or primary data collection) or retrospective (study involves using either administrative/medical record data from hospitals, primary health centres, laboratory or population datasets) or both prospective and retrospective (if study has both components). Other categories which are rarely used include report and outbreak investigation.",
                        max_length=50,
                    ),
                ),
                (
                    "Study_description",
                    models.CharField(
                        blank=True,
                        help_text="Name of the first author, abbreviated name of journal and year of manuscript publication. Example: McDonald, Clin Infect Dis, 2006",
                        max_length=200,
                        verbose_name="Publication info",
                    ),
                ),
                (
                    "Diagnosis_method",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "Clinical and laboratory diagnosis",
                                "Clinical and laboratory diagnosis",
                            ),
                            ("Clinical diagnosis only", "Clinical diagnosis only"),
                            ("ICD codes", "ICD codes"),
                            ("Laboratory diagnosis", "Laboratory diagnosis"),
                            ("Notifications", "Notifications"),
                            (
                                "Primary Health Care codes (SNOMED/ICPC)",
                                "Primary Health Care codes (SNOMED/ICPC)",
                            ),
                            (
                                "Self report (questionnaire/survey)",
                                "Self report (questionnaire/survey)",
                            ),
                            ("Other", "Other"),
                        ],
                        help_text="Indicates the process used to identify/diagnose Strep A-associated diseases, such as: notifications, ICD codes, Snowmed/ICPC codes, clinical diagnosis, laboratory diagnosis, echocardiography or combined methods.",
                        max_length=200,
                    ),
                ),
                (
                    "Data_source",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ED presentations only", "ED presentations only"),
                            ("Hospital admissions", "Hospital admissions"),
                            (
                                "Hospital admissions & active surveillance",
                                "Hospital admissions & active surveillance",
                            ),
                            ("ICU admissions", "ICU admissions"),
                            ("Laboratory records only", "Laboratory records only"),
                            ("Medical records only", "Medical records only"),
                            ("Multiple sources", "Multiple sources"),
                            ("Outbreak investigations", "Outbreak investigations"),
                            ("PHC health service data", "PHC health service data"),
                            ("Register or notification", "Register or notification"),
                            ("Screening programme", "Screening programme"),
                            ("Survey/Questionnaire", "Survey/Questionnaire"),
                            ("Other", "Other"),
                        ],
                        help_text="Method of case finding/identification, for example: screening or active surveillance for reporting cases of impetigo or skin sores; population registers for ARF; medical record review.",
                        max_length=50,
                        verbose_name="Data source",
                    ),
                ),
                (
                    "Surveillance_setting",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Unknown", "Unknown"),
                            ("Community", "Community"),
                            ("Hospital", "Hospital"),
                            ("Household", "Household"),
                            ("Laboratory", "Laboratory"),
                            ("Multiple", "Multiple"),
                            ("Primary health centre", "Primary health centre"),
                            ("Schools", "Schools"),
                            ("Other", "Other"),
                        ],
                        help_text="The type of institution where the study was conducted. Classifications include primary health care clinic (PHC), tertiary hospital, outpatient clinics, school clinics, households, early childhood centers, aged care facilities etc.",
                        max_length=25,
                        verbose_name="Surveillance setting",
                    ),
                ),
                (
                    "Data_source_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the dataset, project, consortium or specific disease register (if applicable).",
                        max_length=200,
                        null=True,
                        verbose_name="Name of data source",
                    ),
                ),
                (
                    "Clinical_definition_category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Undefined or unknown", "Undefined or unknown"),
                            (
                                "Both confirmed and probable cases",
                                "Both confirmed and probable cases",
                            ),
                            ("Confirmed case", "Confirmed case"),
                            ("Definite and probable ARF", "Definite and probable ARF"),
                            (
                                "Suspected or probable case",
                                "Suspected or probable case",
                            ),
                            ("Other", "Other"),
                        ],
                        help_text="Category for capturing the disease classification that was included in the study, if reported. Classifications depend on the disease and can include confirmed, suspected, probably, active, inactive, recurrent, total, undefined or unknown, subclinical or asymptomatic.",
                        max_length=50,
                        verbose_name="Clinical definition category",
                    ),
                ),
                (
                    "Coverage",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "National/multi-jurisdictional",
                                "National/multi-jurisdictional",
                            ),
                            (
                                "Single Institution/service",
                                "Single Institution/service",
                            ),
                            ("State", "State"),
                            ("Subnational/region", "Subnational/region"),
                        ],
                        help_text="Level of geographic coverage in the study, categorised as (i) national/multli-jurisdictional, (ii) state, (iii) subnational/ regional, (iv) single institution/ service.",
                        max_length=200,
                        verbose_name="Geographic Coverage Level",
                    ),
                ),
                (
                    "Climate",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Arid", "Arid"),
                            ("Combination", "Combination"),
                            ("Temperate", "Temperate"),
                            ("Tropical", "Tropical"),
                        ],
                        help_text="Climatic conditions based on the geographic coverage of studies, for example: “Tropical” for studies conducted at the Top-End NT, “Temperate” for studies from Victoria or NSW.",
                        max_length=20,
                    ),
                ),
                (
                    "Urban_rural_coverage",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Combination", "Combination"),
                            ("Metropolitan", "Metropolitan"),
                            ("Regional", "Regional"),
                            ("Remote", "Remote"),
                        ],
                        help_text="Classification into metropolitan, urban/regional, and rural/remote areas.",
                        max_length=20,
                        verbose_name="Urban-Rural Coverage",
                    ),
                ),
                (
                    "Focus_of_study",
                    models.CharField(
                        blank=True,
                        help_text="Brief description of the focus of the study.",
                        max_length=1000,
                    ),
                ),
                (
                    "Limitations_identified",
                    models.CharField(
                        blank=True,
                        help_text="Brief summary of any limitations identified by authors of the publication. (Optional)",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "Other_points",
                    models.TextField(
                        blank=True,
                        help_text="This variable captures any other relevant notes relating to the study that may impact the interpretation of Strep A burden estimates. (Optional)",
                        null=True,
                    ),
                ),
                (
                    "Approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_studies",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Approved by",
                    ),
                ),
                (
                    "Created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="studies",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Contributed by",
                    ),
                ),
                (
                    "Import_source",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="studies",
                        to="database.importsource",
                    ),
                ),
            ],
            options={
                "verbose_name": "Study",
                "verbose_name_plural": "Studies",
                "db_table": "database_studies",
            },
        ),
        migrations.CreateModel(
            name="ResultsModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "Import_row_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique Study identifier for linked Results (only if imported from Excel)",
                        max_length=20,
                        null=True,
                        verbose_name="Unique row identifier",
                    ),
                ),
                (
                    "Import_row_number",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Row number from spreadsheet (only if imported from Excel)",
                        null=True,
                        verbose_name="Excel row number",
                    ),
                ),
                (
                    "Age_general",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Infants", "Infants"),
                            ("Children", "Children"),
                            ("Children and adolescents", "Children and adolescents"),
                            (
                                "Children, adolescents and young adults",
                                "Children, adolescents and young adults",
                            ),
                            ("Adolescents and adults", "Adolescents and adults"),
                            ("Adults", "Adults"),
                            ("Elderly adults", "Elderly adults"),
                            ("All ages", "All ages"),
                        ],
                        help_text="The general age grouping considered for inclusion by the study.",
                        max_length=50,
                        verbose_name="Age category",
                    ),
                ),
                (
                    "Age_min",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Leave blank if unknown or study does not define a lower age limit.",
                        max_digits=10,
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(150.0)],
                        verbose_name="Youngest age in study (years)",
                    ),
                ),
                (
                    "Age_max",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Leave blank if unknown or study does not define upper age limits.",
                        max_digits=10,
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(150.0)],
                        verbose_name="Oldest age in study (years)",
                    ),
                ),
                (
                    "Age_specific",
                    models.CharField(
                        blank=True,
                        help_text="More specific description of age group as reported by the study.",
                        max_length=50,
                        verbose_name="Specific age category",
                    ),
                ),
                (
                    "Population_gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Females", "Females"),
                            ("Males", "Males"),
                            ("Males and females", "Males and females"),
                        ],
                        help_text="This variable captures stratification by sex (where reported), with categories of “males”, “females”, “males and females”.",
                        max_length=30,
                        verbose_name="Population - Gender",
                    ),
                ),
                (
                    "Indigenous_status",
                    models.BooleanField(
                        blank=True,
                        help_text="Flag indicating whether the measure includes an Indigenous population",
                        null=True,
                        verbose_name="Indigenous",
                    ),
                ),
                (
                    "Indigenous_population",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Aboriginal population", "Aboriginal population"),
                            (
                                "General - special population",
                                "General - special population",
                            ),
                            ("General population", "General population"),
                            ("Non-Indigenous population", "Non-Indigenous population"),
                            ("Not Defined", "Not Defined"),
                            ("Torres Strait Islander", "Torres Strait Islander"),
                        ],
                        help_text="This variable captures stratification of the Indigenous population (where reported) into “Aboriginal”, “Torres Strait Islander” or “both Aboriginal and Torres Strait Islanders”.",
                        max_length=50,
                    ),
                ),
                (
                    "Country",
                    models.CharField(
                        blank=True,
                        default="Australia",
                        help_text="Country where study was conducted (for future use, in the case that international studies are added to the data collection).",
                        max_length=30,
                    ),
                ),
                (
                    "Jurisdiction",
                    models.CharField(
                        blank=True,
                        help_text="Jurisdictional location of the study, categorized by individual jurisdiction name (WA, NT, SA, QLD, NSW, Vic) or combination of jurisdictions (Combination – Northern Australia or Combination- others).",
                        max_length=30,
                    ),
                ),
                (
                    "Specific_location",
                    models.CharField(
                        blank=True,
                        help_text="Point estimates stratified by specific geographic locations (where reported), for example: Kimberley, Far North Queensland or Central Australia.",
                        max_length=100,
                        null=True,
                        verbose_name="Specific geographic locations",
                    ),
                ),
                (
                    "Year_start",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Start year for the observed point estimates within the study, allowing for temporal mapping of the point estimates.",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1900),
                            django.core.validators.MaxValueValidator(2100),
                        ],
                    ),
                ),
                (
                    "Year_stop",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="End year for the observed point estimates within the study, allowing for temporal mapping of the point estimates.",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1900),
                            django.core.validators.MaxValueValidator(2100),
                        ],
                    ),
                ),
                (
                    "Observation_time_years",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Total observation time used by the study for generating the point estimate.",
                        max_digits=10,
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(200.0)],
                        verbose_name="Observational time (years)",
                    ),
                ),
                (
                    "Numerator",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="This variable reports the numerators for studies reporting point estimates as proportions (non-population based).",
                        null=True,
                    ),
                ),
                (
                    "Denominator",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="This variable reports the denominators for studies reporting point estimates as proportions (non-population based).",
                        null=True,
                    ),
                ),
                (
                    "Point_estimate",
                    models.CharField(
                        blank=True,
                        help_text="Must be interpreted together with Measure to provide the point estimate reported by the study within the correct measurement context. For example: 2020KATZ reports a point estimate of “4.6” and measure of “per 100,000 population”.",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "Measure",
                    models.TextField(
                        blank=True,
                        help_text="Description of what the Point Estimate refers to and how it is calculated.",
                    ),
                ),
                (
                    "Interpolated_from_graph",
                    models.BooleanField(
                        blank=True,
                        help_text="Indicator variable which is “Yes” if point estimate is interpolated and “No” if a numeric figure is given in the publication.",
                        verbose_name="Interpolated",
                    ),
                ),
                (
                    "Proportion",
                    models.BooleanField(
                        blank=True,
                        help_text="Indicator variable which is “Yes” if point estimate is a proportion and “No” if it is a measure of incidence or prevalence.",
                        verbose_name="Proportion",
                    ),
                ),
                (
                    "Mortality_flag",
                    models.BooleanField(
                        blank=True,
                        help_text="Indicator variable which is “Yes” if point estimate is a mortality estimate and “No” or “Unknown” otherwise.",
                        null=True,
                        verbose_name="Mortality",
                    ),
                ),
                (
                    "Recurrent_ARF_flag",
                    models.BooleanField(
                        blank=True,
                        help_text="Indicator variable which is “Yes” if point estimate includes recurrent ARF and “No” or “Unknown” otherwise (applicable to ARF burden estimates only).",
                        null=True,
                        verbose_name="Recurrent ARF",
                    ),
                ),
                (
                    "StrepA_attributable_fraction",
                    models.BooleanField(
                        blank=True,
                        help_text="Indicator variable which is “Yes” if point estimate is a proportion which is Strep.A-specific and therefore represents a Strep.A-attributable fraction and “No” or “Unknown” otherwise.",
                        null=True,
                        verbose_name="Strep.A fraction",
                    ),
                ),
                (
                    "Hospitalised_flag",
                    models.BooleanField(
                        blank=True,
                        help_text="Point estimate includes hospitalised patients",
                        null=True,
                        verbose_name="Hospitalised",
                    ),
                ),
                (
                    "Schoolchildren_flag",
                    models.BooleanField(
                        blank=True,
                        help_text="Point estimate includes data of school children",
                        null=True,
                        verbose_name="Schoolchildren",
                    ),
                ),
                (
                    "Study",
                    models.ForeignKey(
                        help_text="Select or add the study where these results were published.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="results",
                        to="database.studiesmodel",
                    ),
                ),
            ],
            options={
                "verbose_name": "Result",
                "verbose_name_plural": "Results",
                "db_table": "database_results",
            },
        ),
        migrations.CreateModel(
            name="DataRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "Request_type",
                    models.CharField(
                        choices=[
                            ("addition", "Add a new study"),
                            ("correction", "Make a correction to existing data"),
                            ("other", "Other - please provide details"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "First_author",
                    models.CharField(
                        help_text="Please enter the first author of the study",
                        max_length=100,
                    ),
                ),
                (
                    "Year",
                    models.CharField(
                        help_text="Please enter the publication year of the study",
                        max_length=100,
                        verbose_name="Year of study",
                    ),
                ),
                (
                    "Journal_link",
                    models.CharField(
                        max_length=300, verbose_name="Link to journal article"
                    ),
                ),
                (
                    "Details",
                    models.TextField(
                        blank=True, help_text="Please describe your request"
                    ),
                ),
                ("Created_time", models.DateTimeField(auto_now_add=True)),
                ("Updated_time", models.DateTimeField(auto_now=True)),
                (
                    "Created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Request for addition/correction",
                "verbose_name_plural": "Requests for addition/correction",
            },
        ),
        migrations.AddField(
            model_name="users",
            name="Responsible_for_datasets",
            field=models.ManyToManyField(
                related_name="datasets", to="database.dataset"
            ),
        ),
        migrations.CreateModel(
            name="My_Drafts",
            fields=[],
            options={
                "verbose_name": "Study (Draft)",
                "verbose_name_plural": "Studies (Draft)",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("database.studiesmodel",),
        ),
        migrations.CreateModel(
            name="Results",
            fields=[],
            options={
                "verbose_name": "Result",
                "verbose_name_plural": "Results",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("database.resultsmodel",),
        ),
        migrations.CreateModel(
            name="Studies",
            fields=[],
            options={
                "verbose_name": "Study",
                "verbose_name_plural": "Studies",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("database.studiesmodel",),
        ),
    ]
