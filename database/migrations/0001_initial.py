# Generated by Django 4.1.2 on 2023-01-20 05:53

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=100, unique=True, verbose_name='email')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('profession', models.CharField(blank=True, max_length=50)),
                ('institution', models.CharField(blank=True, max_length=50)),
                ('country', models.CharField(blank=True, max_length=50)),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='Superuser status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='Active')),
            ],
            options={
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='Studies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Unique_identifier', models.CharField(blank=True, help_text='Identifier linking individual Results to each Study in the Studies/Methods data', max_length=12, null=True, verbose_name='Unique Identifier (Internal Use Only)')),
                ('Study_group', models.CharField(blank=True, choices=[('SST', 'Superficial skin and throat'), ('IG', 'Invasive Strep A'), ('ARF', 'ARF'), ('ASPGN', 'APSGN')], help_text='Broad classification of the Strep A-associated disease type that the study was based on: (i) Superficial skin and/or throat infections, (ii) Invasive Strep A infections, (iii) Acute Rheumatic Fever (ARF), (iv) Acute Post Streptococcal Glomerulonephritis (APSGN).', max_length=5, verbose_name='Study Group')),
                ('Paper_title', models.CharField(help_text='Title of the published manuscript/report.', max_length=500, verbose_name='Paper Title')),
                ('Paper_link', models.CharField(blank=True, help_text='URL or doi link for access to the source manuscript/report, full access will depend on open/institutional access permissions set by each journal.', max_length=1000, verbose_name='Paper Link')),
                ('Year', models.PositiveSmallIntegerField(blank=True, help_text='Year of publication of manuscript/report.', null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2100)], verbose_name='Publication Year')),
                ('Disease', models.CharField(blank=True, help_text='Subcategory of disease within the broader study group. Example: iStrepA - bactaraemia', max_length=100, verbose_name='Specific Disease')),
                ('Study_design', models.CharField(choices=[('CS', 'Case series'), ('CST', 'Cross-sectional'), ('P', 'Prospective'), ('PRP', 'Prospective and Retrospective'), ('PC', 'Prospective cohort'), ('R', 'Report'), ('RP', 'Retrospective'), ('RPR', 'Retrospective review'), ('RPC', 'Retrospective cohort'), ('RA', 'Review article'), ('O', 'Other')], help_text='Study classification based on the temporality of data collection. Prospective (if study involves screening or active surveillance or primary data collection) or retrospective (study involves using either administrative/medical record data from hospitals, primary health centres, laboratory or population datasets) or both prospective and retrospective (if study has both components). Other categories which are rarely used include report and outbreak investigation.', max_length=3)),
                ('Study_description', models.CharField(blank=True, help_text='Name of the first author, abbreviated name of journal and year of manuscript publication. Example: McDonald, Clin Infect Dis, 2006', max_length=200, verbose_name='Publication info')),
                ('Diagnosis_method', models.CharField(blank=True, help_text='Indicates the process used to identify/diagnose Strep A-associated diseases, such as: notifications, ICD codes, Snowmed/ICPC codes, clinical diagnosis, laboratory diagnosis, echocardiography or combined methods.', max_length=200)),
                ('Data_source', models.CharField(blank=True, help_text='Method of case finding/identification, for example: screening or active surveillance for reporting cases of impetigo or skin sores; population registers for ARF; medical record review.', max_length=200, verbose_name='Data source')),
                ('Surveillance_setting', models.CharField(blank=True, choices=[('Unknown', 'Unknown'), ('Community', 'Community'), ('Hospital', 'Hospital'), ('Household', 'Household'), ('Laboratory', 'Laboratory'), ('Multiple', 'Multiple'), ('Primary health centre', 'Primary health centre'), ('School', 'School'), ('Other', 'Other')], help_text='The type of institution where the study was conducted. Classifications include primary health care clinic (PHC), tertiary hospital, outpatient clinics, school clinics, households, early childhood centers, aged care facilities etc.', max_length=25, verbose_name='Surveillance setting')),
                ('Data_source_name', models.CharField(blank=True, help_text='Name of the dataset, project, consortium or specific disease register (if applicable).', max_length=200, verbose_name='Name of data source')),
                ('Clinical_definition_category', models.CharField(blank=True, choices=[('Undefined or unknown', 'Undefined or unknown'), ('Both confirmed and probable cases', 'Both confirmed and probable cases'), ('Confirmed case', 'Confirmed case'), ('Definite and probable ARF', 'Definite and probable ARF'), ('Suspected or probable case', 'Suspected or probable case'), ('Other', 'Other')], help_text='Category for capturing the disease classification that was included in the study, if reported. Classifications depend on the disease and can include confirmed, suspected, probably, active, inactive, recurrent, total, undefined or unknown, subclinical or asymptomatic.', max_length=50, verbose_name='Clinical definition category')),
                ('Coverage', models.CharField(blank=True, help_text='Level of geographic coverage in the study, categorised as (i) national/multli-jurisdictional, (ii) state, (iii) subnational/ regional, (iv) single institution/ service.', max_length=200, verbose_name='Geographic Coverage Level')),
                ('Climate', models.CharField(blank=True, help_text='Climatic conditions based on the geographic coverage of studies, for example: “Tropical” for studies conducted at the Top-End NT, “Temperate” for studies from Victoria or NSW.', max_length=200)),
                ('Aria_remote', models.CharField(blank=True, help_text='Classification into metropolitan, regional and remote areas based on the ARIA+ (Accessibility and Remoteness Index of Australia) system.', max_length=200, verbose_name='ARIA+ Remoteness Classification')),
                ('Method_limitations', models.BooleanField(blank=True, help_text='This variable indicates whether method limitations were specified by the authors of the publication.', null=True)),
                ('Limitations_identified', models.CharField(blank=True, help_text='Summary of any limitations identified by authors of the publication.', max_length=1000)),
                ('Other_points', models.TextField(blank=True, help_text='This variable captures any other relevant notes relating to the study that may impact the interpretation of Strep A burden estimates.')),
                ('is_approved', models.BooleanField(default=False, help_text='Designates whether this study has been approved or is pending approval.', verbose_name='Study approved')),
                ('added_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Study added/submitted by user')),
            ],
            options={
                'verbose_name': 'Study',
                'verbose_name_plural': 'Studies',
            },
        ),
        migrations.CreateModel(
            name='Results',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Age_general', models.CharField(blank=True, help_text='The general age grouping considered for inclusion by the study, classified as “all ages” (if studies did not have any age restrictions); “infants”, “young children”, “children and adolescents”, “18 years and younger” and “16 years and older”. ', max_length=50, verbose_name='Age category')),
                ('Age_min', models.DecimalField(blank=True, decimal_places=2, help_text='Leave blank if unknown or study does not define a lower age limit.', max_digits=10, null=True, validators=[django.core.validators.MaxValueValidator(150.0)], verbose_name='Youngest age in study (years)')),
                ('Age_max', models.DecimalField(blank=True, decimal_places=2, help_text='Leave blank if unknown or study does not define upper age limits.', max_digits=10, null=True, validators=[django.core.validators.MaxValueValidator(150.0)], verbose_name='Oldest age in study (years)')),
                ('Age_specific', models.CharField(blank=True, help_text='More specific description of age group as reported by the study.', max_length=50, verbose_name='Specific age category')),
                ('Population_gender', models.CharField(blank=True, help_text='This variable captures stratification by sex (where reported), with categories of “males”, “females”, “males and females”.', max_length=30, verbose_name='Population - Gender')),
                ('Indigenous_status', models.BooleanField(blank=True, help_text='Flag indicating whether this measure involves an Indigenous population', null=True, verbose_name='Population - Indigenous Status')),
                ('Indigenous_population', models.CharField(blank=True, help_text='This variable captures stratification of the Indigenous population (where reported) into “Aboriginal”, “Torres Strait Islander” or “both Aboriginal and Torres Strait Islanders”.', max_length=50)),
                ('Country', models.CharField(blank=True, default='Australia', help_text='Country where study was conducted (for future use, in the case that international studies are added to the data collection).', max_length=30)),
                ('Jurisdiction', models.CharField(blank=True, help_text='Jurisdictional location of the study, categorized by individual jurisdiction name (WA, NT, SA, QLD, NSW, Vic) or combination of jurisdictions (Combination – Northern Australia or Combination- others).', max_length=30)),
                ('Specific_location', models.CharField(blank=True, help_text='Point estimates stratified by specific geographic locations (where reported), for example: Kimberley, Far North Queensland or Central Australia.', max_length=100, verbose_name='Specific geographic locations')),
                ('Year_start', models.PositiveSmallIntegerField(blank=True, help_text='Start year for the observed point estimates within the study, allowing for temporal mapping of the point estimates.', null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2100)])),
                ('Year_stop', models.PositiveSmallIntegerField(blank=True, help_text='End year for the observed point estimates within the study, allowing for temporal mapping of the point estimates.', null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2100)])),
                ('Observation_time_years', models.DecimalField(blank=True, decimal_places=2, help_text='Total observation time used by the study for generating the point estimate.', max_digits=10, null=True, validators=[django.core.validators.MaxValueValidator(200.0)], verbose_name='Observational period')),
                ('Numerator', models.PositiveIntegerField(blank=True, help_text='This variable reports the numerators for studies reporting point estimates as proportions (non-population based).', null=True)),
                ('Denominator', models.PositiveIntegerField(blank=True, help_text='This variable reports the denominators for studies reporting point estimates as proportions (non-population based).', null=True)),
                ('Point_estimate', models.CharField(blank=True, help_text='Must be interpreted together with Measure to provide the point estimate reported by the study within the correct measurement context. For example: 2020KATZ reports a point estimate of “4.6” and measure of “per 100,000 population”.', max_length=100, null=True)),
                ('Measure', models.TextField(blank=True, help_text='Description of what the Point Estimate refers to and how it is calculated.')),
                ('Interpolated_from_graph', models.BooleanField(blank=True, help_text='Indicator variable which is “Yes” if point estimate is interpolated and “No” if a numeric figure is given in the publication.')),
                ('Proportion', models.BooleanField(blank=True, help_text='Indicator variable which is “Yes” if point estimate is a proportion and “No” if it is a measure of incidence or prevalence.', verbose_name='Point estimate is proportion')),
                ('Mortality_flag', models.BooleanField(blank=True, help_text='Indicator variable which is “Yes” if point estimate is a mortality estimate and “No” or “Unknown” otherwise.', null=True, verbose_name='Point estimate is mortality estimate')),
                ('Recurrent_ARF_flag', models.BooleanField(blank=True, help_text='Indicator variable which is “Yes” if point estimate includes recurrent ARF and “No” or “Unknown” otherwise (applicable to ARF burden estimates only).', null=True, verbose_name='Point estimate includes recurrent ARF')),
                ('StrepA_attributable_fraction', models.BooleanField(blank=True, help_text='Indicator variable which is “Yes” if point estimate is a proportion which is Strep.A-specific and therefore represents a Strep.A-attributable fraction and “No” or “Unknown” otherwise.', null=True)),
                ('Hospitalised_flag', models.BooleanField(blank=True, null=True, verbose_name='Point estimate includes hospitalised patients')),
                ('Schoolchildren_flag', models.BooleanField(blank=True, null=True, verbose_name='Point estimate includes data of school children')),
                ('is_approved', models.BooleanField(default=False, help_text='Determines whether this study has been approved by an administrator or is submitted and pending approval.', verbose_name='Results approved')),
                ('Study', models.ForeignKey(help_text='Select or add the study where these results were published.', null=True, on_delete=django.db.models.deletion.CASCADE, to='database.studies')),
                ('added_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Results added/submitted by user')),
            ],
            options={
                'verbose_name': 'Result',
                'verbose_name_plural': 'Results',
            },
        ),
        migrations.CreateModel(
            name='isapproved_False_results',
            fields=[
            ],
            options={
                'verbose_name': 'Results (Pending Approval)',
                'verbose_name_plural': 'Results (Pending Approval)',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('database.results',),
        ),
        migrations.CreateModel(
            name='isapproved_False_studies',
            fields=[
            ],
            options={
                'verbose_name': 'Studies (Pending Approval)',
                'verbose_name_plural': 'Studies (Pending Approval)',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('database.studies',),
        ),
    ]
